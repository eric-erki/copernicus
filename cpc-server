#!/usr/bin/env python

# This file is part of Copernicus
# http://www.copernicus-computing.org/
# 
# Copyright (C) 2011, Sander Pronk, Iman Pouya, Erik Lindahl, and others.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as published 
# by the Free Software Foundation
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.



# This is the main executable, from which all actions are launched. 

import sys
import copy

import cpc.client
import cpc.network.server
import cpc.worker
import cpc.util
import cpc.util.log
import cpc.server.tracking

#from cpc.worker.worker import WorkerMessage
#from cpc.client.view.cmdline import CmdLine
#from cpc.util.openssl import OpenSSL
from cpc.network.com.client_base import ClientError
#from cpc.client import ClientMessage
#from cpc.network.com.client_response import ProcessedResponse
from cpc.util.conf.server_conf import ServerConf
from cpc.util import cmd_line_utils
#import os


def print_usage():
    print "Usage: cpc-server start [-d]"
    print "       cpc-server config-list"
    print "       cpc-server config-values"   
    print "       cpc-server config param value"   
    print "       cpc-server setup default-project-directory"
    print "       cpc-server create-connection-bundle|bundle"
    print ""
    print "Common options:"
    print "       cpc-server [-c confdir]"
    sys.exit(1)

# make a copy for later
args=copy.copy(sys.argv)

if len(args)<2:
    print_usage()

# remove the 0th argument
args.pop(0)
confdir=None

debug=None
# first parse common options
while len(args)>0:
    if args[0][0]!='-':
        break
    elif args[0]=='-c':
        option = args.pop(0)
        if len(args) < 1:
            sys.stdout.write(
                        "ERROR: no value specified for global option '%s'\n"%
                        option)
            print_usage()
        confdir=args.pop(0)
    elif args[0]=='-d':
        args.pop(0)
        debug=cpc.util.log.MODE_DEBUG
    else:
        sys.stdout.write("ERROR: no command or faulty global option '%s'\n"%
                         args[0])
        print_usage()




def getArg(argnr, name):
    try: 
        ret=args[argnr]
    except IndexError:
        raise ClientError("Missing argument: %s"%name)
    return ret


cmd=args[0]

if(cmd !='setup'):
    # read in common configuration
    cf=ServerConf(confdir=confdir)
try:
    if cmd == "help":
        print_usage()
    elif cmd == "start":
        serverMode=cpc.util.log.MODE_PRODUCTION
        if len(args)>1:
            if args[1] == "-d":
                serverMode=cpc.util.log.MODE_DEBUG
                cpc.util.log.initServerLogToStdout(serverMode)
            elif args[1] == "-t":
                serverMode=cpc.util.log.MODE_TRACE
                cpc.util.log.initServerLogToStdout(serverMode)

        print "Starting server.."        
        cpc.network.server.forkAndRun(cf, serverMode )
        sys.exit(0)
    elif cmd == "setup":    
        
        # the -c option will be ignored here.
        # by default we do a setup with the hostname as base config dir or a 
        # name defined by user input
        rundir = getArg(1, 
                        "Run directory: the base directory for project output")
        cn=None
        confdir =None

        print args
        forceReset = False
        if('-force' in args):
            forceReset = True
            args.remove('-force')

        if(len(args)>2):
            cn = getArg(2,"distinguished name for the server")

        cmd_line_utils.initiateServerSetup(rundir, cn,forceReset=forceReset)

        sys.exit(0)
    
    # initialize the client log
    cpc.util.log.initClientLog(debug)
    # initialize the tracker
    cpc.server.tracking.tracker.initTracker()     
    if cmd == "config-list":
        #print '\n'
        conf = ServerConf()
        configs = conf.getUserSettableConfigs()
        cmd_line_utils.printSortedConfigListDescriptions(configs)           
    
    elif cmd == "config-values":
        #print '\n'
        conf = ServerConf()
        configs = conf.getUserSettableConfigs()
        cmd_line_utils.printSortedConfigListValues(configs)

    elif cmd == "config":
        param = getArg(1, "parameter name") 
        value = getArg(2, "parameter value")
        conf = ServerConf()
        conf.set(param,value)

    elif cmd == "bundle" or cmd == "create-connection-bundle":
        connectionBundle = cmd_line_utils.initiateWorkerSetup()
        print connectionBundle.toJson()
    else: 
        print "ERROR: unknown command"
except ClientError as e:
    print("ERROR: %s"%str(e))
except cpc.util.CpcError as e:
    print("ERROR: %s"%str(e))
#except IOError as e:
#    raise e


