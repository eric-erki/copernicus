#!/usr/bin/env python

# This file is part of Copernicus
# http://www.copernicus-computing.org/
# 
# Copyright (C) 2011, Sander Pronk, Iman Pouya, Erik Lindahl, and others.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as published 
# by the Free Software Foundation
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


import sys
import os
import math
import os.path
try:
    from cStringIO import StringIO
except ImportError:
    from StringIO import StringIO

import cpc.dataflow
from cpc.dataflow import StringValue
from cpc.dataflow import FloatValue
from cpc.dataflow import IntValue
from cpc.dataflow import RecordValue
from cpc.dataflow import ArrayValue


class FEError(cpc.dataflow.ApplicationError):
    pass


def fe_binding(inp, out):
    pers=cpc.dataflow.Persistence(os.path.join(inp.persistentDir,
                                               "persistent.dat"))
    prec=pers.get('prec')
    precision=inp.getInput('precision')
    if precision is None:
        precision=1
    if prec != precision:
        prec=precision
        out.setSubOut('prec_bound', FloatValue(precision/2.)) 
        out.setSubOut('prec_solv', FloatValue(precision/2.)) 
    pers.set('prec', prec)

    run_solv=pers.get('run_solv')
    if run_solv is None:
        run_solv=1
        out.addInstance('solv', 'decouple')
        out.addConnection('self:ext_in.grompp_solv', 'solv:in.grompp')
        out.addConnection('self:ext_in.conf_solv', 'solv:in.conf')
        out.addConnection('self:ext_in.ligand_name', 'solv:in.molecule_name')
        out.addConnection('self:ext_in.solvation_relaxation_time', 
                          'solv:in.relaxation_time')
        out.addConnection('self:ext_in.resources_solv', 'solv:in.resources')
        out.addConnection('self:sub_out.prec_solv', 'solv:in.precision')
        out.addConnection('solv:out.delta_f', 'self:sub_in.dG_solv')
    pers.set('run_solv', run_solv)

    run_bound=pers.get('run_bound')
    if run_bound is None:
        run_bound=1
        out.addInstance('bound', 'decouple')
        out.addConnection('self:ext_in.grompp_bound', 'bound:in.grompp')
        out.addConnection('self:ext_in.conf_bound', 'bound:in.conf')
        out.addConnection('self:ext_in.ligand_name', 'bound:in.molecule_name')
        out.addConnection('self:ext_in.binding_relaxation_time', 
                          'bound:in.relaxation_time')
        out.addConnection('self:ext_in.resources_bound', 'bound:in.resources')
        out.addConnection('self:sub_out.prec_bound', 'bound:in.precision')
        out.addConnection('bound:out.delta_f', 'self:sub_in.dG_bound')
    pers.set('run_bound', run_bound)

    boundfValue=inp.getSubnetInputValue('dG_bound')
    solvfValue=inp.getSubnetInputValue('dG_solv')
    if boundfValue is not None and boundfValue.isUpdated():
        out.setOut('delta_f_bound', boundfValue)
    if solvfValue is not None and solvfValue.isUpdated():
        out.setOut('delta_f_solv', solvfValue)

    if boundfValue.isUpdated() or solvfValue.isUpdated():
        boundVal=inp.getSubnetInput('dG_bound.value')
        boundErr=inp.getSubnetInput('dG_bound.error')
        solvVal=inp.getSubnetInput('dG_solv.value')
        solvErr=inp.getSubnetInput('dG_solv.error')
        if (boundVal is not None and boundErr is not None and 
            solvVal is not None and solvErr is not None):
            totVal=boundVal + solvVal
            totErr=math.sqrt( (boundErr*boundErr + solvErr*solvErr)/2. )
            out.setOut('delta_f.value', FloatValue(totVal))
            out.setOut('delta_f.error', FloatValue(totErr))
    pers.write()


# read the input data
inf=StringIO()
inf.write(sys.stdin.read())
inf.seek(0)
sys.stderr.write("\n-----> Starting\n")
inf.seek(0)
inp=cpc.dataflow.readInput(inf)

if inp.testing():
    # TODO: make it possible for sub-functions to be checked now.
    cpc.util.plugin.testCommand("g_bar -version")
    cpc.util.plugin.testCommand("grompp -version")
    cpc.util.plugin.testCommand("trjconv -version")
    cpc.util.plugin.testCommand("gmxdump -version")
    # try to import msmproject and thereby msmbuilder
    sys.exit(0)



# prepare the output data
out=inp.getFunctionOutput()

fe_binding(inp, out)

out.writeXML(sys.stdout)
#sys.stderr.write('\n')
#out.writeXML(sys.stderr)
#sys.stderr.write('\n')
sys.stderr.write("-----> Finished.\n")


