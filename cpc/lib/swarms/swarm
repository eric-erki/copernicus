#!/usr/bin/env python

# This file is part of Copernicus
# http://www.copernicus-computing.org/
# 
# Copyright (C) 2011, Sander Pronk, Iman Pouya, Erik Lindahl, and others.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as published 
# by the Free Software Foundation
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


import sys
import os
import math
import time
import interpolate
import dihedral_restraints
import os.path
try:
    from cStringIO import StringIO
except ImportError:
    from StringIO import StringIO

import cpc.dataflow
from cpc.dataflow import StringValue
from cpc.dataflow import FloatValue
from cpc.dataflow import IntValue
from cpc.dataflow import RecordValue
from cpc.dataflow import ArrayValue
from cpc.dataflow import FileValue

from subprocess import Popen

class FEError(cpc.dataflow.ApplicationError):
    pass


def swarm(inp, out):
    pers=cpc.dataflow.Persistence(os.path.join(inp.persistentDir,
                                               "persistent.dat"))
    # the function...
    iterations=pers.get('iterations')
    if iterations is None or iterations<1:
        Niterations=inp.getInput('Niterations')
        # Niterations is an optional input, path converge may also be used to monitor iterations
        if Niterations is not None:

            start=inp.getInput('start_conf')
            end=inp.getInput('end_conf')
            n=inp.getInput('Ninterpolants')
            top=inp.getInput('restraint_top')
            ndx=inp.getInput('res_index')
            tpr=inp.getInput('tpr')
            interpolate.make_path(start, end, n)
            for i in range(n):
                conf_i=os.path.join(inp.getOutputDir(),'%d.gro'%i)
                out.setSubOut('path[%d].conf'%i, FileValue(conf_i))
                Popen(['g_rama','-f','%s'%conf_i,'-o','%d.xvg'%i,'-s','%s'%tpr])
                #xvg_i=os.path.join(inp.getOutputDir(),'%d.xvg'%i)
                #out.setSubOut('xvg[%d]'%i, FileValue(xvg_i))
            last_xvg=os.path.join(inp.getOutputDir(),'%d.gro'%(n-1))
            time.sleep(5)
            dihedral_restraints.write_restraints(start, top, n, ndx)
            for i in range(n):
                top_i=os.path.join(inp.getOutputDir(),'%d.top'%i)
                out.setSubOut('path[%d].top'%i, FileValue(top_i))

            for i in range(Niterations):
                out.addInstance('iter%d'%i, 'dihedral_swarm_iteration')
                # initial inputs
                out.addConnection('self:ext_in.start_conf', 'iter%d:in.start_conf'%i)
                out.addConnection('self:ext_in.start_xvg', 'iter%d:in.start_xvg'%i)
                out.addConnection('self:ext_in.end_conf', 'iter%d:in.end_conf'%i)
                out.addConnection('self:ext_in.end_xvg', 'iter%d:in.end_xvg'%i)
                out.addConnection('self:ext_in.Ninterpolants', 'iter%d:in.Ninterpolants'%i)
                out.addConnection('self:ext_in.res_index', 'iter%d:in.resindex'%i)
                out.addConnection('self:ext_in.tpr', 'iter%d:in.tpr'%i)
                out.addConnection('self:ext_in.top', 'iter%d:in.top'%i)
                out.addConnection('self:ext_in.restraint_top', 'iter%d:in.restraint_top'%i)
                
                # call the external python scripts to produce the input conf_path
                # subnet inputs connected...

             
                # set the various run settings
                out.addConnection('self:ext_in.minim_grompp', 'iter%d:in.minim_grompp'%i)
                out.addConnection('self:ext_in.em_tolerance', 'iter%d:in.em_tolerance'%i)
                out.addConnection('self:ext_in.equi_grompp', 'iter%d:in.equi_grompp'%i)
                out.addConnection('self:ext_in.restrained_steps', 'iter%d:in.restrained_steps'%i)
                out.addConnection('self:ext_in.swarm_steps', 'iter%d:in.swarm_steps'%i)
                out.addConnection('self:ext_in.Nswarms', 'iter%d:in.Nswarms'%i)
                out.addConnection('iter%d:out.path'%i, 'self:sub_in.paths[%d]'%i)
            
            # connect the iterations
            out.addConnection('self:sub_out.path', 'iter0:in.path')
            iterations=1
    # use pers.get to pass the function args to the various subfunctions
    pers.set('iterations', iterations)

    
    for i in range(Niterations-1):
        next_iter=inp.getSubnetInput('paths[%d]'%i)
        if next_iter is not None:
            out.setSubOut('paths[%d]'%i, ArrayValue(next_iter))
            out.addConnection('self:sub_out.paths[%d]'%i, 'iter%d:in.path'%(i+1))

    pers.write()
# read the input data
inf=StringIO()
inf.write(sys.stdin.read())
inf.seek(0)
sys.stderr.write("\n-----> Starting\n")
inf.seek(0)
inp=cpc.dataflow.readInput(inf)

if inp.testing():
    # TODO: make it possible for sub-functions to be checked now.
    cpc.util.plugin.testCommand("g_bar -version")
    cpc.util.plugin.testCommand("grompp -version")
    cpc.util.plugin.testCommand("trjconv -version")
    cpc.util.plugin.testCommand("gmxdump -version")
    # try to import msmproject and thereby msmbuilder
    sys.exit(0)

# prepare the output data
out=inp.getFunctionOutput()

swarm(inp, out)

out.writeXML(sys.stdout)
#sys.stderr.write('\n')
#out.writeXML(sys.stderr)
#sys.stderr.write('\n')
sys.stderr.write("-----> Finished.\n")


