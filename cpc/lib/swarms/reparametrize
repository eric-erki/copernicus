#!/usr/bin/env python

# This file is part of Copernicus
# http://www.copernicus-computing.org/
# 
# Copyright (C) 2011, Sander Pronk, Iman Pouya, Erik Lindahl, and others.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as published 
# by the Free Software Foundation
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


import sys
import os
import math
import os.path
try:
    from cStringIO import StringIO
except ImportError:
    from StringIO import StringIO

import cpc.dataflow
from cpc.dataflow import StringValue
from cpc.dataflow import FloatValue
from cpc.dataflow import IntValue
from cpc.dataflow import RecordValue
from cpc.dataflow import ArrayValue

import reparametrize


class FEError(cpc.dataflow.ApplicationError):
    pass


def rep(inp, out):
    diheds=inp.getInput('dihedrals')
    ndx_file=inp.getInput('res_index')
    init_top=inp.getInput('init_top')
    start_conf=inp.getInput('start_conf')
    start_xvg=inp.getInput('start_xvg')
    end_conf=inp.getInput('end_conf')
    end_xvg=inp.getInput('end_xvg')
    # check that all the dihedral inputs are ready
    finished=True
    if diheds is not None and len(diheds)>0:
        for i in range(len(diheds)):
            xvgs=inp.getInput('dihedrals[%d]'%i)
            #sys.stderr.write('This is the diheds array %d: %s'%(i,xvgs))
            if xvgs is not None and len(xvgs)>0:
                for j in range(len(xvgs)):
                    xvg=inp.getInput('dihedrals[%d][%d]'%(i,j))
                    if FileValue(xvg) is None:
                        finished=False
            else:
                finished=False
    else: 
        finished=False
        
    if finished==True:
        dihedrals=[]
        for i in range(len(diheds)):
            dih_i=[]
            xvgs=inp.getInput('dihedrals[%d]'%i)
            for j in range(len(xvgs)):
                dih_i.append(inp.getInput('dihedrals[%d][%d]'%(i,j)))
            dihedrals.append(dih_i)
        # check for file objects
        reparametrize.reparametrize(dihedrals, ndx_file, start_conf, start_xvg, end_conf, end_xvg, init_top)
        conf_path=inp.getInput('restrained_out')
        for i in range(len(conf_path)):
            #conf_path[i].itp=os.path.join(inp.outputDir, FileValue('%d.itp'%i))
            itp=FileValue('run/reparametrize/_run0000/%d.itp'%(i+1))
            out.setOut('conf_path[%d].itp'%i,itp)
            conf=FileValue(inp.getInput('restrained_out[%d].conf'%i))
            out.setOut('conf_path[%d].conf'%i,conf)



# read the input data
inf=StringIO()
inf.write(sys.stdin.read())
inf.seek(0)
sys.stderr.write("\n-----> Starting\n")
inf.seek(0)
inp=cpc.dataflow.readInput(inf)

if inp.testing():
    # TODO: make it possible for sub-functions to be checked now.
    cpc.util.plugin.testCommand("g_bar -version")
    cpc.util.plugin.testCommand("grompp -version")
    cpc.util.plugin.testCommand("trjconv -version")
    cpc.util.plugin.testCommand("gmxdump -version")
    # try to import msmproject and thereby msmbuilder
    sys.exit(0)



# prepare the output data
out=inp.getFunctionOutput()

run(inp, out)

out.writeXML(sys.stdout)
#sys.stderr.write('\n')
#out.writeXML(sys.stderr)
#sys.stderr.write('\n')
sys.stderr.write("-----> Finished.\n")


