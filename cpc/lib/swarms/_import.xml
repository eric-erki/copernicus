<?xml version="1.0"?>
<cpc>
    <!-- a module for minimal free energy path calculations using the swarm of strings method-->
    <import name="resource" />
    <import name="gromacs" />
    <import name="meas" />
    <import name="int" />
    <import name="coord" />

    <type id="grompp_input" base="record">
        <desc>Partial grompp input</desc>
        <field type="file" id="mdp" ><desc>A .mdp settings file</desc></field>
        <field type="file" id="top" ><desc>A .top topology file</desc></field>
        <field type="file" id="ndx" opt="true">
            <desc>A .ndx index file</desc>
        </field>
        <field type="gromacs::mdp_array" id="settings" opt="true">
            <desc>array of settings</desc>
        </field>
        <field type="string" id="mdrun_cmdline_options" opt="true">
            <desc>mdrun command line options</desc>
        </field>
    </type>
    <type id="conf" base="file">
        <desc>A conformation of the input protein.</desc>
    </type>
    <type id="path_point" base="record">
        <desc>Describes one point on a path.</desc>
        <field type="file" id="conf">
            <desc>The configuration at this point in the path</desc>
        </field>
        <field type="file" id="top">
            <desc>The topology at this point in the path</desc>
        </field>
        <field type="gromacs::grompp_include_array" id="include">
            <desc>The protein topology include file with dihedral restraints 
                  for this point in the path</desc>
        </field>
    </type>
    <type id="conf_path" base="array" member-type="path_point">
        <desc>An array of configurations of the structure</desc>
    </type>
   <type id="conf_path_array" base="array" member-type="conf_path">
        <desc>An array of paths: the output of a full swarm set.</desc>
    </type>
    <type id="conf_array" base="array" member-type="file">
    </type>
    <type id="conf_array_array" base="array" member-type="conf_array">
        <desc>An array of configurations without itp files</desc>
    </type>
    <type id="z_point" base="array" member-type="float">
        <desc>A point in collective variables space.</desc>
    </type>
    <type id="dist_array" base="array" member-type="float">
        <desc>An array of max. path displacements.</desc>
    </type>
    <type id="trr_array" base="array" member-type="file">
        <desc>An array of trajectory files</desc>
    </type>
    <type id="xvg_array" base="array" member-type="file">
        <desc>An array of xvg (xmgrace) files</desc>
    </type>
    <type id="xvg_path_array" base="array" member-type="xvg_array">
        <desc>An array of arrays of xvg (xmgrace) files</desc>
    </type>

    <!-- functions -->

    <function id="dihedral_swarm" type="external">
        <desc>Sets up a swarm-based string method simulation with a set of 
              dihedrals as the tracking (z-)space of the path</desc>
        <inputs>
            <field type="grompp_input" id="minim_grompp">
                <desc>A full set of input values for grompp 
                      for the minimization with restraints.
                </desc>
            </field>
             <field type="float" id="em_tolerance">
                <desc>The number of steps of minimization to preform.</desc>
            </field>
            <field type="file" id="top">
                <desc>The topology include file describing the protein to be
                      sampled</desc> 
            </field>
            <field type="file" id="tpr">
                <desc>A tpr file for g_rama runs</desc>
            </field>
            <field type="grompp_input" id="equi_grompp">
                <desc>A full set of input values for grompp (except 
                      configuration).
                </desc>
            </field>
            <!--<field type="file" id="restraint_top">
                <desc>The topology include file describing the protein to be
                      sampled</desc> 
            </field>-->
            <field type="file" id="start_conf">
                <desc>The start configuration of the path.</desc>
            </field>
            <field type="file" id="end_conf">
                <desc>The end configuration of the path.</desc>
            </field>
             <field type="file" id="start_xvg">
                <desc>The start configuration of the path.</desc>
            </field>
            <field type="file" id="end_xvg">
                <desc>The end configuration of the path.</desc>
            </field>
            <field type="file" id="res_index">
                <desc>The index file with one group that determines the phi/psi 
                      dihedrals to use for the z space. </desc>
            </field>
            <field type="int" id="Ninterpolants">
                <desc>The number of steps of interpolation between the initial
                      and target conformations.</desc>
            </field>
            <field type="int" id="restrained_steps">
                <desc>The number of restrained equilibration steps 
                    for the swarm iteration.
                </desc>
            </field>
            <field type="int" id="swarm_steps">
                <desc>The number of steps to run in a free simulation for the 
                      swarm runs.</desc>
            </field>
            <field type="int" id="Nswarms">
                <desc>The number of swarm simulations to run.</desc>
            </field>
            <field type="int" id="Niterations" opt="true">
                <desc>The number of swarm simulations to run.</desc>
            </field>
            <field type="int" id="Nchains" opt="true">
                <desc>The number of chains of the protein.</desc>
            </field>
            <field type="gromacs::grompp_include_array" id="include" opt="true">
                <desc>.itp files describing a multi-chain protien.</desc>
            </field>
            <field type="float" id="convergence_distance" opt="true">
                <desc>Desired maximum displacement in dihedrals between
                      iterations.</desc>
            </field>
        </inputs>
        <outputs>
            <field type="conf_path_array" id="paths">
                <desc>The sequence of paths generated</desc>
            </field>
            <field type="dist_array" id="dists">
                <desc>The maximum displacement distance for each iteration.
                </desc>
            </field>
        </outputs>
        <subnet-outputs>
            <field type="conf_path" id="path">
                <desc>A linearly interpolated path as the initial path</desc>
            </field>
            <field type="conf_path_array" id="paths">
            </field>
        </subnet-outputs>
        <subnet-inputs>
             <field type="resource::run_desc" id="resources">
            </field>
        </subnet-inputs>
       <controller log="true" executable="swarm" 
                    persistent_dir="true" />
    </function>

    <function id="run_minimization" type="external">
        <desc>Minimize the interpolated structures for restrained simulations.
        </desc>
        <inputs>
            <field type="grompp_input" id="grompp">
                <desc>Minimization mdp file</desc>
            </field>
            <field type="resource::run_desc" id="resources" opt="true">
                <desc>The run resources for a typical run</desc>
            </field>
            <field type="conf_path" id="conf_path">
                <desc>Configurations to be minimized</desc>
            </field>
            <field type="float" id="em_tolerance">
                <desc>The minimization tolerance to use.</desc>
            </field>
        </inputs>
        <outputs>
            <field type="conf_path" id="minimized_conf_path">
                <desc>Output configurations of the minimization</desc>
            </field>
        </outputs>
        <subnet-inputs>
            <field type="gromacs::conf_array" id="confs" />
        </subnet-inputs>
        <subnet-outputs>
            <field type="gromacs::mdp_array" id="minimization_settings" />
            <field type="gromacs::conf_array" id="confs" />
            <field type="gromacs::top_array" id="tops" />
            <field type="gromacs::grompp_include_array_array" id="includes" />
        </subnet-outputs>    
        <controller log="true" executable="run_minimization" 
                    persistent_dir="true" />
    </function>
            
    <function id="run_restrained" type="external">
        <desc>Simulations generating conformations for swarm trajectories.
        </desc>
        <inputs>
            <field type="grompp_input" id="grompp">
                <desc>Restrained run mdp file</desc>
            </field>
            <field type="resource::run_desc" id="resources" opt="true">
                <desc>The run resources for a typical run</desc>
            </field>
            <field type="int" id="restrained_steps">
                <desc>The number of steps for the constrained run after 
                      equilibration.</desc>
            </field>
            <field type="int" id="Nswarms">
                <desc>The number of swarm trajectories to run. The 
                      restrained trajectory will output this number of
                      frames. </desc>
            </field>
            <field type="conf_path" id="minimized_conf_path">
                <desc>Output structures of the minimization and their
                      restraint parameters.</desc>
            </field>
        </inputs>
        <outputs>
            <field type="trr_array" id="restrained_trrs" />
            <field type="conf_array" id="confs" />
            <field type="conf_path" id="path"/>
        </outputs>
        <subnet-inputs>
            <field type="gromacs::conf_array" id="confs" />
            <field type="gromacs::trr_array" id="trrs" />
        </subnet-inputs>
        <subnet-outputs>
            <field type="gromacs::conf_array" id="confs" />
            <field type="gromacs::top_array" id="tops" />
            <field type="gromacs::mdp_array" id="restrained_settings" />
            <field type="gromacs::trr_array" id="trrs" />
        </subnet-outputs>  
        <controller log="true" executable="run_restrained" 
                    persistent_dir="true" />
    </function>

    <function id="prep_swarms" type="external">
        <desc>Generate inputs for swarm trajectories.</desc>
        <inputs>
            <field type="trr_array" id="trrs">
                    <desc>Output of the restrained simulations.</desc>
            </field>
            <field type="file" id="tpr">
                    <desc>The tpr file for trjconv</desc>
            </field>
        </inputs>
        <outputs>
            <field type="conf_array_array" id="in_swarms">
                    <desc>Initial swarm confs.</desc>
            </field>
        </outputs>
        <subnet-inputs>
            <field type="conf_array_array" id="in_swarms">
            </field>
        </subnet-inputs>
        <controller log="true" executable="prep_swarms" 
                    persistent_dir="true" />
    </function>

    <function id="run_swarms" type="external">
        <desc>Run a large number of short unbiased trajectories.</desc>
        <inputs>
            <field type="grompp_input" id="grompp">
                <desc>Swarm run mdp file</desc>
            </field>
            <!--<field type="file" id="tpr">
                <desc>A tpr for g_rama</desc>
            </field>--> 
            <field type="resource::run_desc" id="resources" opt="true">
                <desc>The run resources for a typical run</desc>
            </field>
            <field type="conf_array_array" id="conf_array_array" >
                    <desc>Initial swarm confs.</desc>
            </field>
            <field type="int" id="swarm_steps">
                    <desc>Number of steps to run of unbiased simulation.</desc>
            </field>
            <field type="gromacs::grompp_include_array" id="include" opt="true">
                <desc>.itp files describing a multi-chain protien.</desc>
            </field>
          </inputs>
        <outputs>
            <!--<field type="conf_path" id="conf_path">
                <desc>Output confs from restrained simulation together with
                    .itp files containing the new set of dihedral restraint
                    values for the next iteration. </desc>
            </field>-->
            <field type="conf_array_array" id="swarms" complete="true">
                <desc>The structures from unrestrained simulations</desc>
            </field>
        </outputs>
        <subnet-inputs>
            <field type="conf_array" id="swarms_out">
                <desc>The structures from unrestrained simulations</desc>
            </field>
            <field type="xvg_path_array" id="xvgs">
                    <desc>Output phi/psi angles of unrestrained simulations.
                    </desc>
            </field>
        </subnet-inputs>
        <subnet-outputs>
            <field type="gromacs::mdp_array" id="swarm_settings" />
            <field type="conf_array_array" id="out_swarms"/>
            <field type="resource::run_desc" id="resources" opt="true">
                <desc>Swarm runs are always set to a single core</desc>
            </field>
        </subnet-outputs>
        <controller log="true" executable="run_swarms" 
                    persistent_dir="true" />
    </function>

    <function id="get_dihedrals" type="external">
        <desc>Call g_rama to get the dihedral angles of the swarm confs</desc>
        <inputs>
            <field type="conf_array_array" id="confs" complete="true">
                <desc>Input confs</desc>
            </field>
            <field type="file" id="tpr">
            </field>
        </inputs>
        <outputs>
            <field type="xvg_path_array" id="xvgs">
            </field>
        </outputs>
        <subnet-inputs>
        </subnet-inputs>
        <controller log="true" executable="get_dihedrals" 
                    persistent_dir="true" />
    </function>
   

    <function id="reparametrize" type="external">
        <desc>Compute the average drift in z-space and use it to set 
                restraint values for the next iteration.
        </desc>
        <inputs>
            <field type="xvg_path_array" id="dihedrals" complete="true">
                <desc>The swarm trajectory output, sent to
                        g_rama to get points in z-space.</desc>
            </field>
            <field type="int" id="Nswarms">
                <desc>To check for a full populated array</desc>
            </field>
            <field type="int" id="Nchains">
                <desc>In lieu of a more flexible approach in the works</desc>
            </field>
            <field type="int" id="Ninterpolants">
                <desc>To check for a fully populated array</desc>
            </field>
            <field type="conf_path" id="restrained_out">
                <desc>The output confs of restrained simulation"</desc>
            </field>
            <field type="conf_array" id="restrained_confs">
                <desc>The output confs of restrained simulation"</desc>
            </field>
            <field type="file" id="start_conf">
                <desc>The start conformation (state A)</desc>
            </field>
            <field type="file" id="end_conf">
                <desc>The end conformation (state B)</desc>
            </field>
            <field type="file" id="start_xvg">
                <desc>The start conformation (state A)</desc>
            </field>
            <field type="file" id="end_xvg">
                <desc>The end conformation (state B)</desc>
            </field>

            <field type="file" id="res_index">
                <desc>The index file with a single group that determines the phi/psi 
                        dihedrals to use for the z space. </desc>
            </field>
        </inputs>
        <outputs>
            <field type="conf_path" id="path" complete="true">
                <desc>Output confs from restrained simulation together with
                    .itp files containing the new set of dihedral restraint
                    values for the next iteration. </desc>
            </field>
            <!-- Temporarily, have all swarm iteration inputs as reparam output -->
        </outputs>
        <controller log="true" executable="reparametrize" 
                    persistent_dir="true" />
    </function>


    <function id="dihedral_swarm_iteration" type="network">
        <desc>A single iteration of the swarm-based string method</desc>
        <inputs>
            <field type="file" id="start_conf">
                <desc>The start conformation (state A)</desc>
            </field>
            <field type="file" id="start_xvg">
                <desc>The start point (state A)</desc>
            </field>
            <field type="file" id="end_conf">
                <desc>The end conformation (state B)</desc>
            </field>
            <field type="file" id="end_xvg">
                <desc>The end point in z-space (state B)</desc>
            </field>
            <field type="file" id="top">
                <desc>A restraint free topology for the system</desc>
            </field>
            <field type="grompp_input" id="minim_grompp">
                <desc>A full set of input values for grompp (except 
                      configuration) for the minimization runs.
                </desc>
            </field>
            <field type="grompp_input" id="equi_grompp">
                <desc>A full set of input values for grompp (except 
                    configuration) for the restrained and swarm
                    equilibrations.</desc>
            </field>
            <field type="file" id="resindex">
                <desc>Dihedral selection.</desc>
            </field>
            <field type="conf_path" id="path" complete="true">
                <desc>A full set of structures along the path so far.</desc>
            </field>
            <field type="float" id="em_tolerance">
                <desc>The number of minimization steps for the swarm iteration.
                </desc>
            </field>
            <field type="int" id="restrained_steps">
                <desc>The number of steps of restrained equilibration.</desc>
            </field>
            <field type="int" id="swarm_steps">
                <desc>The number of steps to run in a free simulation for the 
                      swarm runs.</desc>
            </field>
            <field type="int" id="Nswarms">
                <desc>The number of swarm simulations to run.</desc>
            </field>
            <field type="int" id="Nchains">
                <desc>The number of swarm simulations to run.</desc>
            </field>
            <field type="int" id="Ninterpolants">
                <desc>The number of points along the path.</desc>
            </field>
            <field type="file" id="tpr">
                <desc>A tpr file for the system.</desc>
            </field>
            <field type="resource::run_desc" id="resources" opt="true">
                <desc>The run resources for a typical run</desc>
            </field>
            <field type="gromacs::grompp_include_array" id="include">
                <desc>The protein topology include file with dihedral restraints 
                      for this point in the path</desc>
            </field>
        </inputs>
        <outputs>
            <field type="conf_path" id="path">
                <desc>A full set of structures along the path so far.</desc>
            </field>
            <!--<field type="float" id="distance">
                <desc>The largest displacement in z-space for the new path.
                </desc>
            </field>-->
        </outputs>
        <network>
            <instance id="minimization" function="run_minimization"/>
            <instance id="equilibration" function="run_restrained"/>
            <instance id="prep_swarms" function="prep_swarms"/>
            <instance id="swarms" function="run_swarms"/>
            <instance id="get_dihedrals" function="get_dihedrals"/>
            <instance id="reparametrize" function="reparametrize"/>

            <!-- connections to minimization -->
            <connection src="self:ext_in.minim_grompp"
                        dest="minimization:in.grompp"/>
            <connection src="self:ext_in.em_tolerance"
                        dest="minimization:in.em_tolerance"/>
            <connection src="self:ext_in.path"
                        dest="minimization:in.conf_path"/>
            <connection src="self:ext_in.resources"
                        dest="minimization:in.resources"/>
            <!-- connect minimization to restrained_runs -->
            <connection src="minimization:out.minimized_conf_path"
                        dest="equilibration:in.minimized_conf_path"/>
            <!-- connections to equilibration -->
            <connection src="self:ext_in.restrained_steps"
                        dest="equilibration:in.restrained_steps"/>
            <connection src="self:ext_in.equi_grompp"
                        dest="equilibration:in.grompp"/>
            <connection src="self:ext_in.Nswarms"
                        dest="equilibration:in.Nswarms"/>
            <connection src="minimization:out.minimized_conf_path"
                        dest="reparametrize:in.restrained_out"/>
            <connection src="equilibration:out.confs"
                        dest="reparametrize:in.restrained_confs"/>
            <connection src="self:ext_in.resources"
                        dest="equilibration:in.resources"/>
                    
            <!-- connect restrained_runs to prep_swarms -->
            <connection src="equilibration:out.restrained_trrs"
                        dest="prep_swarms:in.trrs"/>
            <connection src="self:ext_in.tpr"
                        dest="prep_swarms:in.tpr"/>

            <!-- connect prep_swarms to run_swarms-->
            <connection src="prep_swarms:out.in_swarms"
                        dest="swarms:in.conf_array_array"/>
            <connection src="self:ext_in.swarm_steps"
                        dest="swarms:in.swarm_steps"/>
            <connection src="self:ext_in.equi_grompp.mdp"
                        dest="swarms:in.grompp.mdp"/>
            <connection src="self:ext_in.minim_grompp.top"
                        dest="swarms:in.grompp.top"/>
            <connection src="self:ext_in.tpr"
                        dest="swarms:in.tpr"/>
            <connection src="self:ext_in.Nswarms"
	                    dest="swarms:in.Nswarms"/>
            <connection src="self:ext_in.Ninterpolants"
	                    dest="swarms:in.Ninterpolants"/>
            <connection src="self:ext_in.resources"
                        dest="swarms:in.resources"/>
            <connection src="self:ext_in.include"
                        dest="swarms:in.include"/>
            
            <!-- connect run_swarms to get_dihedrals-->
            <connection src="self:ext_in.tpr"
                        dest="get_dihedrals:in.tpr"/>
            <connection src="swarms:out.swarms"
                        dest="get_dihedrals:in.confs"/>

            <!-- connect get_dihedrals to reparametrize-->
            <connection src="get_dihedrals:out.xvgs"
                        dest="reparametrize:in.dihedrals"/>
            <!--<connection src="self:ext_in.restraint_top"
                        dest="reparametrize:in.restraint_top"/>-->
            <connection src="self:ext_in.resindex"
                        dest="reparametrize:in.res_index"/>
            <connection src="self:ext_in.start_conf"
                        dest="reparametrize:in.start_conf"/>
            <connection src="self:ext_in.start_xvg"
                        dest="reparametrize:in.start_xvg"/>
            <connection src="self:ext_in.end_conf"
                        dest="reparametrize:in.end_conf"/>
            <connection src="self:ext_in.end_xvg"
                        dest="reparametrize:in.end_xvg"/>
            <connection src="self:ext_in.Nswarms"
                        dest="reparametrize:in.Nswarms"/>
            <connection src="self:ext_in.Nchains"
                        dest="reparametrize:in.Nchains"/>
            <connection src="self:ext_in.Ninterpolants"
                        dest="reparametrize:in.Ninterpolants"/>

            <!--connect reparam output.top-->
            <connection src="reparametrize:out.path"
                        dest="self:ext_out.path"/>
        </network>
    </function>
</cpc>
