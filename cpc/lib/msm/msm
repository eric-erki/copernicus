#!/usr/bin/env python

# This file is part of Copernicus
# http://www.copernicus-computing.org/
# 
# Copyright (C) 2011, Sander Pronk, Iman Pouya, Erik Lindahl, and others.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as published 
# by the Free Software Foundation
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


import sys
import os
import os.path
import shutil
import glob
import stat
import subprocess
import traceback
import re
try:
    from cStringIO import StringIO
except ImportError:
    from StringIO import StringIO



import cpc.dataflow
from cpc.dataflow import IntValue
from cpc.dataflow import FileValue
from cpc.dataflow import StringValue
from cpc.dataflow import ArrayValue
from cpc.dataflow import ListValue
from cpc.dataflow import FloatValue
#import cpc.server.command
#import cpc.util
#import cpc.util.log


#import msmproject

# the lowest priority of a run
min_prio=-4


class MsmError(cpc.dataflow.ApplicationError):
    pass

def spawnNewSim(inp, out, i, confFile, priority, gen_vel, desc):
    """Spawn a new simulation.
       inp = the controller input object
       out = the controller output object
       i = the simulation number
       confFile = the configuration file (must be an input or in an output dir)
       priority = the simulation priority 
       gen_vel = whether to use the gen_vel mdp setting."""
    sys.stderr.write("Adding new simulation with conf %s\n"%confFile)

    out.setSubOut("confs[%d]"%i, FileValue(confFile))
    out.setSubOut("priority[%d]"%i, IntValue(priority))
    out.setSubOut("desc[%d]"%i, StringValue("%s %d %d"%(desc, i, priority)))
    # make the sim instance
    out.addInstance("sim_%d"%i, "gmx_sim")
    if gen_vel:
        out.addConnection("self:sub_out.grompp_inp_gen_vel", 
                          "sim_%d:in.grompp_input"%i)
    else:
        out.addConnection("self:sub_out.grompp_inp_no_gen_vel", 
                          "sim_%d:in.grompp_input"%i)
    out.addConnection("self:sub_out.confs[%d]"%i, "sim_%d:in.conf"%i)
    out.addConnection("self:sub_out.priority[%d]"%i, "sim_%d:in.priority"%i)
    out.addConnection("self:sub_out.desc[%d]"%i, "sim_%d:in.desc"%i)
    out.addConnection("self:ext_in.ndx", "sim_%d:in.ndx"%i)
    out.addConnection("self:ext_in.reference", "sim_%d:in.reference"%i)
    out.addConnection("self:ext_in.grpname", "sim_%d:in.grpname"%i)
    out.addConnection("sim_%d:out.trajectory"%i, 
                      "traj_collect:in.trajectories[%d]"%i)

def msm(inp, out):
    #cpc.util.log.initServerLogToStdout(debug=True)
    # now  
    #output=open(os.path.join(inp.persistentDir, "test.out"),"w")
    #output.write("%s"%str(inp.inputs))
    #output.write("%s"%str(inp.subnetInputs))
    #output.close()

    # first check if we're initializing
    init=False
    if ( (not inp.hasSubnetOutput("grompp_inp_gen_vel")) or
         (not inp.hasSubnetOutput("grompp_inp_no_gen_vel")) or
         (not inp.hasSubnetOutput("msm_in") ) ):
        # we're initializing
        init=True
    if inp.isInputUpdated("grompp"):
        # we must initialize
        init=True

    # set up the persistence object. We need it because we must spawn
    # numbered runs and could get clashing number otherwise due to 
    # simulations ending simultaneously. The presence of a persistent 
    # directory means that only one controller can be running at a time.
    pers=cpc.dataflow.Persistence(os.path.join(inp.persistentDir,
                                               "persistent.dat"))
    if init:
        sys.stderr.write("Initializing msm\n")
        # here we create an entirely new sampling set.

        # set up the run environment. 

        # initialize the trajectory collector
        out.addInstance('traj_collect', 'trajectory_collect')
        out.addSubnetInput('total_traj_ns', 'float')
        out.addSubnetInput('trajectories', 'trajectory_array')
        # from self to traj_collect
        out.addConnection('self:ext_in.reference',
                          'traj_collect:in.reference')
        out.addConnection('self:ext_in.grpname',
                          'traj_collect:in.grpname')
        out.addConnection('self:ext_in.ndx',
                          'traj_collect:in.ndx')
        # from traj_collect to self
        out.addConnection('traj_collect:out.total_traj_ns',
                          'self:sub_in.total_traj_ns')
        out.addConnection('traj_collect:out.trajectories',
                          'self:sub_in.trajectories')

        # We set up two inputs, one with gen_vel and one without.
        out.addSubnetOutput("grompp_inp_gen_vel", "grompp_input")
        out.addSubnetOutput("grompp_inp_no_gen_vel", "grompp_input")
        out.addSubnetOutput("desc", "desc_array")

        out.setSubOut("grompp_inp_gen_vel.mdp", 
                      inp.getInputValue("grompp.mdp"))
        out.setSubOut("grompp_inp_gen_vel.top", 
                      inp.getInputValue("grompp.top"))
        out.setSubOut("grompp_inp_gen_vel.include", 
                      inp.getInputValue("grompp.include"))
        out.setSubOut("grompp_inp_gen_vel.mdrun_cmdline_options", 
                      inp.getInputValue("grompp.mdrun_cmdline_options"))

        
        out.setSubOut("grompp_inp_no_gen_vel.mdp", 
                      inp.getInputValue("grompp.mdp"))
        out.setSubOut("grompp_inp_no_gen_vel.top", 
                      inp.getInputValue("grompp.top"))
        out.setSubOut("grompp_inp_no_gen_vel.include", 
                      inp.getInputValue("grompp.include"))
        out.setSubOut("grompp_inp_no_gen_vel.mdrun_cmdline_options", 
                      inp.getInputValue("grompp.mdrun_cmdline_options"))

        # and the array of clustering inputs
        out.addSubnetOutput('msm_in', 'build_msm_in_array')
        out.addSubnetInput('msm_out', 'build_msm_out_array')

        settings=inp.getInput("grompp.settings")
        genVelSettings=[]
        noGenVelSettings=[]
        for setting in settings:
            name=setting.value['name'].value.strip().replace('-', '_').\
                        lower()
            if name != "gen_vel":
                genVelSettings.append(setting) 
                noGenVelSettings.append(setting)
        genVelSettings.append(ListValue( { 'name': StringValue('gen_vel') ,
                                           'value' : StringValue('yes') } ) )
        noGenVelSettings.append(ListValue( { 'name': StringValue('gen_vel') ,
                                             'value' : StringValue('no') } ) )
        out.setSubOut("grompp_inp_no_gen_vel.settings", 
                      ArrayValue(noGenVelSettings) )
        out.setSubOut("grompp_inp_gen_vel.settings", 
                      ArrayValue(genVelSettings) )

        # then we set up the configuration output array
        out.addSubnetOutput("confs", "conf_array")
        out.addSubnetOutput("ndx", "file")
        out.addSubnetOutput("priority", "priority_array")
        #if inp.hasInput('ndx'):
        #    out.setSubOut('ndx', inp.getInputValue('ndx'))
        out.addSubnetInput("trajs", "trajectory_array")
       
        num_sim=inp.getInput("num_sim")
        num_macro=inp.getInput("num_macrostates")
        start_sim=num_sim

        confs=inp.getInput("confs")
        for i in range(start_sim):
            conf=confs[i % len(confs)].value
            spawnNewSim(inp, out, i, conf, 0, True, "initial")
        #out.setOut('run_num', IntValue(num_sim))
        pers.set('running', start_sim)
        pers.set('cluster_gen', 0)
        pers.set('processed_cluster_gen', 0)
    else:
        # get these numbers from the (locked) persistence object
        run_num=pers.get('running')
        cluster_gen=pers.get('cluster_gen')
        #processed_cluster_gen=pers.get('processed_cluster_gen')

        # check if a trajectory has finished and we can spawn a new run:
        trajectories=inp.getSubnetInputValue('trajectories')
        if trajectories.value is not None and trajectories.isUpdated():
            for traj in trajectories.value:
                if traj.isUpdated():
                    # TODO: fix the API for this
                    conf=traj.getSubValue(['conf'])
                    try:
                        # keep the original priority
                        desc=traj.getSubValue(['desc']).value
                        priority=int(desc.split()[2])
                    except:
                        priority=0
                    # prevent the priority from becoming too low.
                    if priority < min_prio:
                        priority = min_prio 
                    if conf is not None and conf.value is not None:
                        sys.stderr.write("\nCreating sim %d\n\n"%run_num)
                        spawnNewSim(inp, out, run_num, conf.value, priority, 
                                    True, "continuation")
                        run_num+=1

        total_traj_ns=inp.getSubnetInput('total_traj_ns')
        recluster=inp.getInput('recluster')
        # now check if we need to recluster
        if total_traj_ns is not None:
            sys.stderr.write("total_traj_ns=%g, recluster=%g, cluster_gen=%d\n"%
                             (total_traj_ns, recluster, cluster_gen))
            recluster_now=False
            if inp.isInputUpdated('lag_time'):
                # we can force reclustering by setting or changing the lag time
                recluster_now=True
            while ( (total_traj_ns - recluster*cluster_gen > recluster) or
                    recluster_now):
                sys.stderr.write("\nCreating new build_msm instance\n\n")
                nclust=ListValue( { } )
                nclust.addItem('ndx', inp.getInputValue('ndx'))
                nclust.addItem('num_microstates', 
                               inp.getInputValue('num_microstates'))
                nclust.addItem('num_macrostates', 
                               inp.getInputValue('num_macrostates'))
                nclust.addItem('lag_time', inp.getInputValue('lag_time'))
                nclust.addItem('reference', inp.getInputValue('reference'))
                nclust.addItem('grpname', inp.getInputValue('grpname'))
                start_per_state=int(inp.getInput('num_sim')/
                                    inp.getInput('num_macrostates'))
                if (start_per_state<1):
                    sys.stderr.write("Too few simulations in num_sim. Increase it.")
                nclust.addItem('start_per_state', 
                               cpc.dataflow.IntValue(start_per_state))
                nclust.addItem('trajectories', 
                               inp.getSubnetInputValue('trajectories'))
                out.setSubOut('msm_in[%d]'%cluster_gen, nclust)
                out.addInstance("build_msm_%d"%cluster_gen, "build_msm")
                out.addConnection(
                            'self:sub_out.msm_in[%d]'%cluster_gen, 
                            'build_msm_%d:in'%cluster_gen)
                out.addConnection('build_msm_%d:out'%cluster_gen,
                            'self:sub_in.msm_out[%d]'%cluster_gen)
                cluster_gen+=1
                recluster_now=False
            #if total_traj_ns
                   
        # now process reclustering data.
        clust_in=inp.getSubnetInput('msm_out')
        if clust_in is not None and len(clust_in)>0:
            last=len(clust_in)-1
            lastnm='msm_out[%d]'%last
            sys.stderr.write('checking %s: cluster round updated: %s\n'%
                             (lastnm, clust_in[last].isUpdated()))
            if clust_in[last].isUpdated():
            #while processed_cluster_gen < cluster_gen:
                output_set=False
                #sys.stderr.write('Checking individual items, such as %s; %s\n'%
                #                (inp.getSubnetInput('%s.maxstate'%lastnm),
                #                 inp.hasSubnetInput('%s.maxstate'%lastnm)))
                # set this instance's outputs to reflect the latest results
                if inp.getSubnetInput('%s.timescales'%lastnm) is not None:
                    output_set=True
                    out.setOut('timescales', 
                               inp.getSubnetInputValue('%s.timescales'%lastnm))
                if inp.getSubnetInput('%s.maxstate'%lastnm) is not None:
                    output_set=True
                    out.setOut('maxstate', 
                               inp.getSubnetInputValue('%s.maxstate'%lastnm))
                if inp.getSubnetInput('%s.macro_conf'%lastnm) is not None:
                    output_set=True
                    out.setOut('macro_conf', 
                               inp.getSubnetInputValue('%s.macro_conf'%lastnm))
                if inp.getSubnetInput('%s.macro_weights'%lastnm) is not None:
                    output_set=True
                    out.setOut('macro_weights', 
                             inp.getSubnetInputValue('%s.macro_weights'%lastnm))
                if (inp.getSubnetInput('%s.macro_transition_counts'%lastnm) 
                    is not None):
                    output_set=True
                    out.setOut('macro_transition_counts', 
                               inp.getSubnetInputValue(
                                           '%s.macro_transition_counts'%lastnm))
                if (inp.getSubnetInput('%s.macro_assignments'%lastnm) 
                    is not None):
                    output_set=True
                    out.setOut('macro_assignments', 
                               inp.getSubnetInputValue(
                                            '%s.macro_assignments'%lastnm))
                if (inp.getSubnetInput('%s.micro_assignments'%lastnm) 
                    is not None):
                    output_set=True
                    out.setOut('micro_assignments', 
                               inp.getSubnetInputValue(
                                            '%s.micro_assignments'%lastnm))
                # now generate new simulations.
                if ((inp.getSubnetInput('%s.sim_start_conf'%lastnm) is 
                        not None) and
                    inp.isSubnetInputUpdated('%s.sim_start_conf'%lastnm)):
                    startConfs=inp.getSubnetInput('%s.sim_start_conf'%lastnm)
                    sys.stderr.write("\nCreating new simulations.\n")
                    if startConfs is not None:
                        Nnew_sims=len(startConfs)
                        # the priority is 2 * the cluster_gen:
                        priority=2*(last+1)
                        for i in range(Nnew_sims):
                            # now start new sims
                            conf=inp.getSubnetInput('%s.sim_start_conf[%d]'%
                                                    (lastnm, i))
                            sys.stderr.write("\nCreating sim %d\n\n"%run_num)
                            spawnNewSim(inp, out, run_num, conf, priority, 
                                        True, "adaptive")
                            run_num+=1
                if output_set:
                    out.setOut('generation', cpc.dataflow.IntValue(last+1))

        pers.set('cluster_gen', cluster_gen)
        #pers.set('processed_cluster_gen', processed_cluster_gen)
        pers.set('running', run_num)
    pers.write()
    return out


# read the input data
inf=StringIO()
inf.write(sys.stdin.read())
inf.seek(0)
sys.stderr.write("\n-----> Starting\n")
#sys.stderr.write(inf.read())
#sys.stderr.write('\n')
inf.seek(0)
inp=cpc.dataflow.readInput(inf)

if inp.testing():
    # TODO: make it possible for sub-functions to be checked now.
    cpc.util.plugin.testCommand("trjcat -version")
    cpc.util.plugin.testCommand("eneconv -version")
    cpc.util.plugin.testCommand("grompp -version")
    cpc.util.plugin.testCommand("trjconv -version")
    cpc.util.plugin.testCommand("gmxdump -version")
    # try to import msmproject and thereby msmbuilder
    import msmproject
    sys.exit(0)

# prepare the output data
out=inp.getFunctionOutput()

msm(inp, out)

out.writeXML(sys.stdout)
#sys.stderr.write('\n')
#out.writeXML(sys.stderr)
#sys.stderr.write('\n')
sys.stderr.write("-----> Finished.\n")


