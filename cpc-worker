#!/usr/bin/env python

# This file is part of Copernicus
# http://www.copernicus-computing.org/
# 
# Copyright (C) 2011, Sander Pronk, Iman Pouya, Erik Lindahl, and others.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as published 
# by the Free Software Foundation
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.



# This is the main executable, from which all actions are launched.
import os

import sys
import copy
import signal

import cpc.client
import cpc.network.server
from cpc.util import cmd_line_utils
from cpc.util.conf.connection_bundle import ConnectionBundle
import cpc.worker
import cpc.util
import cpc.util.log
from cpc.network.com.client_base import ClientError

def print_usage():

    print "Usage: [-c conf-file] [-d] cpc-worker worker-type"
    print ""
    sys.exit(1)

# make a copy for later
args=copy.copy(sys.argv)

if len(args)<2:
    print_usage()

# remove the 0th argument
args.pop(0)
conffile=None

debug=False
# first parse common options
while len(args)>0:
    if args[0][0]!='-':
        break
    elif args[0]=='-c':
        option = args.pop(0)
        if len(args) < 1:
            sys.stdout.write("ERROR: no value specified for global option '%s'"%option)
            print_usage()
        conffile=args.pop(0)
    elif args[0]=='-d':
        args.pop(0)
        debug=True
    else:
        sys.stdout.write("ERROR: no command or faulty global option '%s'"%
              args[0])
        print_usage()


# read in common configuration


def getArg(argnr, name):
    try: 
        ret=args[argnr]
    except IndexError:
        raise ClientError("Missing argument: %s"%name)
    return ret

# now parse command and execute it.
#clnt=cpc.client(cf, args)

cmd=args[0]

cf= cmd_line_utils.initiateConnectionBundle(conffile)

cpc.util.log.initClientLog(debug)

try:
    if cmd == "help":
        print_usage()
    else:
        type=getArg(0, "Worker type")
        restargs=[]
        for i in range(1, len(args)):
            restargs.append(args[i])
        worker=cpc.worker.Worker(cf, type, restargs)
        #def shutdownHandler(signum,frame):
        #  worker.shutdown()
        #signal.signal(signal.SIGINT,shutdownHandler)
        worker.run()
except ClientError as e:
    print("ERROR: %s"%e)
except cpc.util.CpcError as e:
    print("ERROR: %s"%e)

