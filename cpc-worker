#!/usr/bin/env python

# This file is part of Copernicus
# http://www.copernicus-computing.org/
# 
# Copyright (C) 2011, Sander Pronk, Iman Pouya, Erik Lindahl, and others.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as published 
# by the Free Software Foundation
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.



# This is the main executable, from which all actions are launched.

import sys
import copy
import cpc.client
import cpc.network.server
import cpc.worker
import cpc.util
import cpc.util.log
from cpc.util import cmd_line_utils
from cpc.util.exception import ClientError
from cpc.util.conf.connection_bundle import ConnectionBundle

from cpc.util.version import __version__

def print_usage():

    print "Usage: cpc-worker [global-opts] cpc-worker worker-type"
    print ""
    print "    Global options are:"
    print "       -c  conn-bundle:  Specify connection bundle"
    print "       -p  projectname:  Only accept work from a named project."
    print "       -wd dirname:      Worker scratch directory (instead of"
    print "                         in the current working directory)."
    print "       -q  minutes:      Quit after specified number of minutes of"
    print "                         no work."
    print "       -d:               Debug mode."
    print ""
    print "    Worker types include:"
    print "       smp:   for single-host multiprocessor runs"
    print "       mpi:   for multiple-host MPI runs"
    sys.exit(1)

# make a copy for later
args=copy.copy(sys.argv)

if len(args)<2:
    print_usage()

# remove the 0th argument
args.pop(0)
bundleFile=None

#opts to be passed to the worker
opts = {}


# workdir is None (to get it from the conf) or a value set with -wd
workdir=None

# quitMinutes is the number of minutes after which to quit if there is no work 
# (set with -q)
quitMinutes=None

debug=False
# first parse common options
while len(args)>0:
    if args[0][0]!='-':
        break
    elif args[0]=='-c':
        option = args.pop(0)
        if len(args) < 1:
            sys.stderr.write(
                "ERROR: no value specified for global option '%s'\n"%option)
            print_usage()
        bundleFile=args.pop(0)
    elif args[0]=='-p':
        option = args.pop(0)
        if len(args) < 1:
            sys.stderr.write(
                "ERROR: no value specified for global option '%s'\n"%option)
            print_usage()
        opts['project']=args.pop(0)
    elif args[0]=='-wd':
        option = args.pop(0)
        if len(args) < 1:
            sys.stderr.write(
                "ERROR: no value specified for global option '%s'\n"%option)
            print_usage()
        workdir=args.pop(0)
    elif args[0]=='-q':
        option = args.pop(0)
        if len(args) < 1:
            sys.stderr.write(
                "ERROR: no value specified for global option '%s'\n"%option)
            print_usage()
        minutesString=args.pop(0)
        try:
            quitMinutes=float(minutesString)
        except ValueError:
            sys.stderr.write("'%s' is not a number."%minutesString)
    elif args[0]=='-d':
        args.pop(0)
        debug=True
    else:
        sys.stderr.write("ERROR: no command or faulty global option '%s'\n"%
              args[0])
        print_usage()


# read in common configuration


def getArg(argnr, name):
    try: 
        ret=args[argnr]
    except IndexError:
        raise ClientError("Missing argument: %s"%name)
    return ret

cmd=args[0]
cpc.util.log.initClientLog(debug)

try:
    if cmd == "help":
        cmd_line_utils.printLogo()
        cmd_line_utils.printAuthors()
        print_usage()
    elif cmd == "version":
        cmd_line_utils.printLogo()
        cmd_line_utils.printAuthors()
        print("Worker version:  %s"%__version__)

    else:
        cf= cmd_line_utils.initiateConnectionBundle(bundleFile)
        type=getArg(0, "Worker type")
        restargs=[]
        for i in range(1, len(args)):
            restargs.append(args[i])
        worker=cpc.worker.Worker(cf, opts, type, restargs, workdir, quitMinutes)
        worker.run()
        worker.cleanup()
except ClientError as e:
    print("ERROR: %s"%e)
except cpc.util.CpcError as e:
    print("ERROR: %s"%e)

