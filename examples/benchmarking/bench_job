#!/usr/bin/env python

#simply tests how many connections a server can handle
from multiprocessing import pool
import shlex
import subprocess
from multiprocessing import Pool
import sys
import copy
import time
import os


def sendRequest(cmd_line):

    args = shlex.split(cmd_line)
#    p = subprocess.(args, stdin=subprocess.PIPE, stdout=subprocess.PIPE,
#        stderr=subprocess.PIPE)
#    (stdout, stderr) = p.communicate()

    p =subprocess.call(args)
    if(p!=0):
        print "error occured for request %s"%cmd_line
        return (cmd_line,False)

    return (cmd_line,True)

cmd_args = copy.copy(sys.argv)
cmd_args.pop(0)

if (len(cmd_args)!=3):
    print "Usage: bench_jobs PROJECTNAME NUMJOBS NUMPOOL "

numPool = int(cmd_args[2])
numJobs = int(cmd_args[1])
projName = cmd_args[0]

home = os.path.expanduser("~")
#cmd_line_base = "./cpcc -c %s/.copernicus/client.cnx"%home
cmd_line_base = "./cpcc"


#do login
cmd_line = 'cpcc login -stdin root'
args = shlex.split(cmd_line)
p = subprocess.Popen(args, stdin=subprocess.PIPE, stdout=subprocess.PIPE,
    stderr=subprocess.PIPE)
(stdout, stderr) = p.communicate(input='root\n')
assert p.returncode == 0,\
    "Failed login: stdout: '%s', stderr: '%s'"%(stdout,stderr)




sendRequest("%s start %s"%(cmd_line_base,projName))
sendRequest("%s import benchmark"%cmd_line_base)
sendRequest("%s transact"%cmd_line_base)
sendRequest("%s instance benchmark::result_collector results"%cmd_line_base)
sendRequest("%s transact"%cmd_line_base)
sendRequest("%s set results.in.num_samples %s"%(cmd_line_base,numJobs))

p= Pool(numPool)

sleepCmd = "%s instance benchmark::sleep sleep_%s"
commands = [sleepCmd%(cmd_line_base,i) for i in range(0,numJobs)]
p.map(sendRequest,commands)

connectCmd= "%s connect sleep_%s:out.exec_time results:in.sleep_time_array[%s]"
commands = [connectCmd%(cmd_line_base,i,i) for i in range(0,numJobs)]
p.map(sendRequest,commands)

#setCmd = "%s set sleep_%s.in.sleep_time 1"
setCmd = "%s set sleep_%s.in.sleep_time 0"
commands = [setCmd%(cmd_line_base,i) for i in range(0,numJobs)]
p.map(sendRequest,commands)

sendRequest("cpcc commit")
sendRequest("cpcc activate")
















