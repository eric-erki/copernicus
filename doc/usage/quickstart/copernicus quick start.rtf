{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww12300\viewh14040\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf0 quickstart for peter\
\

\b Running projects
\b0 \
\

\b 1.setup server\
\
\pard\pardeftab720\ql\qnatural

\b0 \cf0 From git/copernicus directory (top-level git directory for copernicus) do :
\b \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\i\b0 \cf0 ./cpc-server setup <myproject-dir>
\i0 \
\
copy ./examples/excutables to ~/.copernicus  \

\i cp ./examples/excutables  ~/.copernicus
\i0 \
\
start the copernicus server (a lot of output will be generated when running, but the debug option is safer for now):\

\i ./cpc-server start -d
\i0 \
\
in ./examples/test/rungmxtest we have a simple script that sets up a project with one command simulating water\
./examples/test/rungmxtest\
\
run it and the project will setup and activate(start running) the project, \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b \cf0 2.startup workers\

\b0 ./cpc-worker smp -n <numcores>\
\
you should now see a worker receive a command and run it , it should take about 30 seconds.\
\

\b 2b.  starting workers on a machine where there is no server running\

\b0 \
A simple way to specify the server is to use cpcc config client_host.  The following snippet will set up Copernicus on a fresh host, configure the client, and launch a worker.  It can be used in a single-node PBS job submission script, for example.\
\
CPCDIR=<PATH_TO_COPERNICUS>\
$CPCDIR/cpc-server setup ~/.copernicus\
$CPCDIR/cpcc config client_host <MY_SERVER>\
$CPCDIR/cpc-worker smp -n <NUMCORES>\
\

\b 3. checking results
\b0 \
at this point the workers have sent back the results to the project server\
\
first list all project items:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\i \cf0 ./cpcc list
\i0 \
\{u'instances': [u'grompp', u'mdrun']\}  //output\
\
to list at a deeper level just specify the name of the instance\
\

\i ./cpcc list mdrun\
\{u'inputs': [u'tpr'], u'outputs': [u'conf', u'stdout', u'edr', u'xtc', u'stderr', u'trr'], u'instances': []\}  //output\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\i0 \cf0 here we see what inputs and outputs the mdrun instance has.\
\
the outputs can be fetched with 
\i get
\i0  and 
\i get-file\
\
./cpc-server get-file mdrun:out.xtc filename  \

\i0 \
in general the syntax for project list is:\
\pard\pardeftab720\ql\qnatural

\i \cf0 ./cpcc list [level0name]:[level1name]\
\
\pard\pardeftab720\ql\qnatural

\i0 \cf0 and for get and get-files\
\pard\pardeftab720\ql\qnatural

\i \cf0 ./cpcc get [level0name]:[level1name]:[in/out].[ioitem]
\i0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \

\b How do i rerun the project?\

\b0 stop and restart server\
./cpc-server stop\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\i \cf0 rm -rf <myproject-dir>\
./examples/test/rungmxtest\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\i0 \cf0 \
\

\b Set up network\

\b0 \
in our example we will connect to cpc servers one will be the project server where we start projects from(
\b project server
\b0 ) and one server will be the servers that workers connect to(
\b worker server
\b0 )\
\
start up 2 servers on different hosts(if they are not started you wont be able to initiate a connection)\
\
from the 
\b project server: 
\b0 send a connection request to the 
\b worker server
\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\i \cf0 ./cpc-server add-node <hostname> <port> (right now a port is needed, the default  to set is 14807 which is our http port,) 
\i0 \
\
you can now see sent connection requests from the 
\b project server
\b0  with\

\i ./cpc-server list-sent-node-requests\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\i0 \cf0 on the 
\b worker server
\b0  you can see what nodes that have requested for connection:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\i \cf0 ./cpc-server list-node-requests
\i0 \
\
to grant the listed requests just do(on 
\b worker server
\b0 )\
./cpc-server trust-all\
\
you should now see all connected nodes with (on both servers)\

\i ./cpc-server list-nodes
\i0 \
\
\
at this stage the servers can communicate with each other. this means that you can start a project from the
\b  project server 
\b0 as in the instructions above, just remember that workers should communicate with the 
\b worker server.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\b0 \cf0 if you are running the workers on the same machine as the project-server(which we usually do, even on lindgren) it works by just doing cpc-worker.  \
\
\
\
\
 }